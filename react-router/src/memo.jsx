/* 
SPA(Single Page Application) ↔ MPA(Multiple Page Application)

<MPA>
- 여러 개의 페이지로 구성되어 있는 app (html로 만든)
- ssr(server side rendering)방식으로 렌더링한다
- 새로운 페이지를 요청(링크를 클릭했을 경우)할 때마다 html, css, js 같은 렌더링 요소들을 모두 다운로드한다
- 현재 페이지를 새로고침해도 새로 랜더링을 한다는 단점이 있다(새로고침을 하면서 새로 페이지를 요청하기 때문)

장점
- seo(검색엔진)에서 유리한 위치 (ssr에 적합하게 되어 있다)
- 최초 로딩이 빠른 편

단점
- 페이지 요청시마다 리로딩(새로고침) -> 새로운 페이지마다 렌더링이 새로 되는 방식이기 때문
- 모바일앱 개발시 백엔드 작업이 따로 필요
- 로딩 관련해서 성능 저하 or 메모리 부하가 생길 수 있다

<SPA>
- 하나의 페이지로 구성된 app이다
- spa는 렌더링에 필요한 html, css, js(정적요소)들을 최초 요청 시(처음 페이지를 들어갈 때) 모든 요소들을 한 번에 다운받는다
- 그 후에 서버 요청에 따라 필요한 데이터만 전달받아서 페이지를 렌더링하는 방식 (대표적으로 react, vue)
- spa의 단점은 최초에 모든 요소들을 다운받기 때문에 최초 로딩은 느린 편이지만 그 후에는 다른 방식보다 로딩이 빠르다(필요한 요소만 렌더링하기 때문에)
- spa는 csr(client side rendering)방식의 렌더링을 사용한다

장점
- 필요한 부분만 렌더링 하기 때문에 성능적으로 mpa보다 우위를 가져올 수 있다
- 페이지마다 작업하는 것이 아닌 컴포넌트 작업 방식으로 유지보수나 생산성이 높다
- 모바일 앱 관련해서 별도의 백엔드 작업이 필요없다

단점
- 구동 속도가 조금 느림
- seo(검색엔진)가 상대적으로 불리함(하지만 ssr 방식으로 우회할 수 있다)


<react router>
: 사용자가 요청한 링크 주소를 이동시켜 주는 것 (리액트에서는 a태그를 사용하면 안된다 - mpa방식이라)
- 별도의 링크 관련 훅을 사용해서 페이지를 연결해야 한다

사용법
yarn add react-router-dom 설치
*/